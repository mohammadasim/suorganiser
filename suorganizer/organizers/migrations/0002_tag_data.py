# Generated by Django 3.0.5 on 2020-04-21 07:03
"""

"""
from django.db import migrations

TAGS = (
    ('augmented reality', 'augmented-reality'),
    ('terraform automation', 'terraform-automation'),
    ('jenkins pipeline', 'jenkins-pipeline'),
    ('devops culture', 'devops-culture'),
    ('mobile', 'mobile'),
    ('django', 'django')
)


def add_tag_data(apps, schema_editor):
    """
    Using the bulk_create method
    we optimise the creation process.
    bulk_create method doesn't handle
    any sort of relationships
    :param apps:
    :param schema_editor:
    :return:
    """
    Tag = apps.get_model('organizers', 'Tag')
    tag_list = []
    for tag_name, tag_slug in TAGS:
        tag_list.append(Tag(name=tag_name, slug=tag_slug))
    Tag.objects.bulk_create(tag_list)


def remove_tag_data(apps, schema_editor):
    """
    To optimise the tag removal process we
    want to make use of the delete() method
    in the queryset object. So if we have a
    queryset method with multiple objects we
    can delete them at once.
    The trick is to be able to create such a
    queryset object. We thus make use of
    django Q object, with Q object we can make
    use of boolean operators of & and |.
    We 
    :param apps:
    :param schema_editor:
    :return:
    """
    Tag = apps.get_model('organizers', 'Tag')
    for _, tag_slug in TAGS:
        tag = Tag.objects.get(slug=tag_slug)
        tag.delete()


class Migration(migrations.Migration):
    dependencies = [
        ('organizers', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(
            add_tag_data,
            remove_tag_data
        )
    ]

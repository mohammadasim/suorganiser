# Generated by Django 3.0.5 on 2020-04-21 07:03
"""
Migration file to add and remove Tag data
"""
from functools import reduce
from operator import or_
from django.db import migrations
from django.db.models import Q

TAGS = (
    ('augmented reality', 'augmented-reality'),
    ('terraform automation', 'terraform-automation'),
    ('jenkins pipeline', 'jenkins-pipeline'),
    ('devops culture', 'devops-culture'),
    ('mobile', 'mobile'),
    ('django', 'django')
)


def add_tag_data(apps, schema_editor):
    """
    Using the bulk_create method
    we optimise the creation process.
    bulk_create method doesn't handle
    any sort of relationships
    :param apps:
    :param schema_editor:
    :return:
    """
    Tag = apps.get_model('organizers', 'Tag')
    tag_list = []
    for tag_name, tag_slug in TAGS:
        tag_list.append(Tag(name=tag_name, slug=tag_slug))
    Tag.objects.bulk_create(tag_list)


def remove_tag_data(apps, schema_editor):
    """
    To optimise the tag removal process we
    want to make use of the delete() method
    in the queryset object. So if we have a
    queryset method with multiple objects we
    can delete them at once.
    The trick is to be able to create such a
    queryset object. We thus make use of
    django Q object. Django's Q object is used
    to encapsulate  a SQL expression in a python
    object that can be used in database related
    operations. Using Q objects we can create
    complex queries with less and simple code.
    Below we create a Q object when iterating
    over Tag list.
    These Q objects are then packed together
    using reduce which makes use of the or_
    function, which creates a list like
    [Q(slug='my_slug') | Q(slug='your_slug')]
    We then pass this to the filter method
    and call the delete method of the queryset
    returned by the filter method.
    :param apps:
    :param schema_editor:
    :return:
    """
    Tag = apps.get_model('organizers', 'Tag')
    query_list = []
    for _, tag_slug in TAGS:
        query_list.append(
            Q(slug=tag_slug)
        )
        query = reduce(or_, query_list)
        Tag.objects.filter(query).delete()


class Migration(migrations.Migration):
    dependencies = [
        ('organizers', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(
            add_tag_data,
            remove_tag_data
        )
    ]

# Generated by Django 3.0.5 on 2020-08-21 04:47
from django.contrib.auth.models import Permission
from django.db import migrations
from django.contrib.auth.management import create_permissions


def generate_permissions(apps, schema_editor):
    """
    Method to create permissions for blogs
    that are defined in its model meta class.
    Even though we have migration for adding
    permission that we have created in post model
    in file 0004, these permissions will not be
    in the database when this method is run, so
    the permissions.get method in the try block
    will throw DoesNotExist exception.
    In the except block using the apps attribute
    passed to this function, that points to the
    project level AppConfig instance and knows
    about all the modules in the application, we
    get the model for blogs.
    We then get the models_module attribute of
    the the model and set it to true. In order
    to add permissions the value of this
    attribute must be set to True. Once the
    permission is added, we then set the
    value to none again.
    :param apps:
    :param schema_editor:
    :return:
    """
    # Retrieving the Permissions model from auth
    permissions = apps.get_model('auth', 'Permission')
    try:
        # We check if the permissions exist
        # If the permissions don't exist in
        # the except block we create the
        # permissions.
        permissions.objects.get(
            codename='add_post',
            content_type__app_label='blogs'
        )
    except permissions.DoesNotExist:
        app_config = apps.get_app_config('blogs')
        if app_config.models_module is None:
            app_config.models_module = True
            create_permissions(app_config, verbosity=0)
            app_config.models_module = None
        else:
            raise


def remove_permissions(apps, schema_editor):
    """
    Migration requires the creation of both
    forward and backward function. In the
    forward function we create the permissions
    while, this function will not do anything
    it is important that we define it, otherwise
    un applying the migration will throw errors
    :param apps:
    :param schema_editor:
    :return:
    """
    pass


class Migration(migrations.Migration):
    dependencies = [
        ('auth', '0006_require_contenttypes_0002'),
        ('blogs', '0004_auto_20200605_0956'),
    ]

    operations = [
        migrations.RunPython(
            generate_permissions,
            remove_permissions,
        )
    ]

# Generated by Django 3.0.5 on 2020-08-21 04:47
from django.contrib.auth.models import Permission
from django.db import migrations
from django.contrib.auth.management import create_permissions


def generate_permissions(apps, schema_editor):
    """
    Method to create permissions for blogs
    that are defined in it model meta class
    :param apps:
    :param schema_editor:
    :return:
    """
    # Retrieving the Permissions model from auth
    permissions = apps.get_model('auth', 'Permission')
    try:
        permissions.objects.get(
            codename='add_post',
            content_type__app_label='blogs'
        )
    except Permission.DoesNotEist:
        models_module = getattr(
            apps, 'models_module', None
        )
        if models_module is None:
            create_permissions(
                apps, verbosity=0
            )
            apps.models_module = None
        else:
            raise


def remove_permissions(apps, schema_editor):
    """
    Migration requires the creation of both
    forward and backward function. In the
    forward function we create the permissions
    while, this function will not do anything
    it is important that we define it, otherwise
    un applying the migration will throw errors
    :param apps:
    :param schema_editor:
    :return:
    """
    pass


class Migration(migrations.Migration):
    dependencies = [
        ('auth', '0006_require_contenttypes_0002'),
        ('blogs', '0004_auto_20200605_0956'),
    ]

    operations = [
        migrations.RunPython(
            generate_permissions,
            remove_permissions,
        )
    ]
